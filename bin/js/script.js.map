{"version":3,"sources":["webpack:///webpack/bootstrap a4ce04032c98ccfad4f2","webpack:///./src/js/Botao.js","webpack:///./src/js/Main.js","webpack:///./src/js/SuperBotao.js"],"names":["Botao","view","document","createElement","style","cssText","text","innerText","window","onload","bt","body","appendChild","addText","superbt","SuperBotao","addEvents","cursor","marginTop","addEventListener","background"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;AC7DA;;;;;;;;;;IAUMA,K;;AAQF;;;;;AAKA,qBAAc;AAAA;;AAAA,aAPdC,IAOc,GAPP,IAOO;;AACV;;;;AAIA,aAAKA,IAAL,GAAYC,SAASC,aAAT,CAAuB,KAAvB,CAAZ;AACA;;;;AAIA,aAAKF,IAAL,CAAUG,KAAV,CAAgBC,OAAhB;AASH;;AAED;;;;;;;AAjCA;;;;;;;;;gCAuCQC,I,EAAM;AACV;;;;;;;AAOA,iBAAKL,IAAL,CAAUM,SAAV,GAAsBD,IAAtB;AACH;;;;;;AAGL;;;;;;;;kBAMeN,K;;;;;;;;;AC9Df;;;;AACA;;;;;;AAEA;;;;AATA;;;;;;AAaAQ,OAAOC,MAAP,GAAgB,YAAM;AAClB;;;;;;;AAOA,QAAIC,KAAK,IAAIV,eAAJ,EAAT;AACA;;;;;;;;AAQAE,aAASS,IAAT,CAAcC,WAAd,CAA0BF,GAAGT,IAA7B;AACA;;;;AAIAS,OAAGG,OAAH,CAAW,aAAX;;AAEA;;;;;AAKA,QAAIC,UAAU,IAAIC,oBAAJ,EAAd;AACAb,aAASS,IAAT,CAAcC,WAAd,CAA0BE,QAAQb,IAAlC;AACAa,YAAQD,OAAR,CAAgB,aAAhB;AACA;;;AAGAC,YAAQE,SAAR;AACH,CApCD;;AAwCA;;AAEA;;;;;;;AAOA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAIA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrFA;;;;;;;;;;+eATA;;;;;;AAMA;;;;;AAKA;;;;IAIMD,U;;;AACF,0BAAc;AAAA;;AAAA;AACV;;;;;;;;AAOA,cAAKd,IAAL,CAAUG,KAAV,CAAgBa,MAAhB,GAAyB,SAAzB;AACA,cAAKhB,IAAL,CAAUG,KAAV,CAAgBc,SAAhB,GAA4B,MAA5B;AATU;AAUb;;AAED;;;;;;;;oCAIY;AAAA;;AACR;;;;AAIA,iBAAKjB,IAAL,CAAUkB,gBAAV,CAA2B,WAA3B,EAAwC,YAAM;AAC1C,uBAAKlB,IAAL,CAAUG,KAAV,CAAgBgB,UAAhB,GAA6B,OAA7B;AACH,aAFD;AAGA;;;;AAIA,iBAAKnB,IAAL,CAAUkB,gBAAV,CAA2B,UAA3B,EAAuC,YAAM;AACzC,uBAAKlB,IAAL,CAAUG,KAAV,CAAgBgB,UAAhB,GAA6B,KAA7B;AACH,aAFD;AAGH;;;;EAhCoBpB,e;;AAoCzB;;;;;kBAGee,U","file":"script.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a4ce04032c98ccfad4f2","/*\nMeu objetivo nesta tarefa é criar um botão vermelho, cujo texto do botão poderá\nser adicionado e modificado através da Main.js\n\nPara isso ser possível, eu preciso criar o objeto botão, então, eu crio um arquivo\nnovo chamado Botao.js, que é este arquivo\n\nPrimeiro Passo: inicializar a classe Botao; todo código deve constar dentro dela\n*/\n\nclass Botao {\n    /*\n    Primeiro, comecei descrevendo uma variável q coloquei o nome de view, que\n    representará graficamente o formato do botão que quero criar; null significa\n    que ainda não quero definir nenhum valor nela\n    */\n    view = null;\n\n    /*\n    Agora, vou usar o método constructor, a lembrar que ele representa o primeiro\n    método que quero que seja executado; a seguir, a var view vai receber um\n    valor, fazendo referência à var desta classe com this\n    */\n    constructor() {\n        /*\n        Para criar um elemento HTML é preciso acessar o documento da página com\n        document e usar o método createElement() adicionando a tag desejada\n        */\n        this.view = document.createElement('div');\n        /*\n        Agora, já posso fazer as configurações de CSS do meu botão referenciando\n        novamente à var this.view, que já representa uma tag div do HTML\n        */\n        this.view.style.cssText = `\n            width: 250px;\n            background: red;\n            padding: 20px 0;\n            color: white;\n            font-family: sans-serif;\n            font-size: 30px;\n            text-align: center;\n        `;\n    }\n\n    /*\n    Agora, vou inserir uma ação ao objeto, cujo método permitirá que eu escreva\n    qualquer texto no botão através da Main; nomeei esse método de addText do\n    qual ele necessitará receber um parâmetro para funcionar, cuja variável a\n    nomeei de text\n    */\n    addText(text) {\n        /*\n        Aqui, no bloco da função, não preciso chamar outro método para executar\n        essa tarefa, como o document.write(). Eu posso simplificar e especificar\n        melhor minha intenção, com a propriedade de string chamada innerText que\n        renderizará o texto dentro do nó div, bastando atribuir essa declaração\n        ao parâmetro deste método. Assim feito, é só chamar esta função na Main\n        */\n        this.view.innerText = text;\n    }\n}\n\n/*\nExportar a classe para que eu possa usá-la em outros lugares, seja instanciando\nela na classe Main, seja herdando ela em outro objeto; nesse momento, já estou\napta a fazer aparecer esse objeto na tela do meu navegador através da classe Main,\nentão, vamos à ela!\n*/\nexport default Botao;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/Botao.js","/*\r\nMeu primeiro objetivo é fazer com que o meu navegador reconheça que uma página\r\nHTML foi criada com o meu objeto Botao; preciso adicionar um evento para isso\r\ncom o window (que corresponde à janela do navegador; objeto de mais alto nível)\r\n*/\r\n\r\nimport Botao from './Botao';\r\nimport SuperBotao from './SuperBotao';\r\n\r\n/*\r\nwindow.onload significa carregamento de página; após carregar a página, ele vai\r\nexecutar uma função que, no caso, utilizo uma arrow function para indicá-la\r\n*/\r\nwindow.onload = () => {\r\n    /*\r\n    Aqui dentro preciso, primeiro, trazer meu objeto Botao pra cá, ou seja, tenho\r\n    que instanciá-lo para que ele possa ser visualizado na página, então, é\r\n    necessário importá-lo antes de tudo com import (ver acima), depois eu crio\r\n    uma variável para instanciar Botao; detalhe técnico: não esquecer do () para\r\n    representar uma instância\r\n    */\r\n    var bt = new Botao();\r\n    /*\r\n    Para mostrar a div que criei no objeto Botao, basta usar o método appendChild,\r\n    indicando o elemento pai (body) dentro do documento HTML (document); o\r\n    parâmetro de appendChild é a variável view, que representa o conteúdo da div\r\n    que está dentro da classe Botao, indicada pela var bt; feito isto, vamos voltar\r\n    à classe Botao para adicionar informações sobre o texto que vai ser inserido\r\n    no botao através deste arquivo Main\r\n    */\r\n    document.body.appendChild(bt.view);\r\n    /*\r\n    Agora, vou chamar a função (addText()) que renderiza texto no objeto Botao\r\n    (bt), e vou inserir como argumento o texto desejado\r\n    */\r\n    bt.addText(\"clique aqui\");\r\n\r\n    /*\r\n    Acrescentando informações do SuperBotao; lá em cima já o importei com import,\r\n    e aqui embaixo estou instanciando-o, inserindo a view dele e adicionando\r\n    texto, igual como fiz para Botao\r\n    */\r\n    var superbt = new SuperBotao();\r\n    document.body.appendChild(superbt.view);\r\n    superbt.addText(\"super botão\");\r\n    /*\r\n    Agora, vou chamar a função nova que criei lá\r\n    */\r\n    superbt.addEvents();\r\n}\r\n\r\n\r\n\r\n/* ANOTAÇÃO ANTERIOR */\r\n\r\n/*\r\nHERANÇA\r\n\r\nServe para quando queremos evoluir um objeto, sem se desfazer do objeto anterior.\r\nHerda as características do objeto anterior e acrescenta/ extende novas funcionalidades.\r\n*/\r\n\r\n// import Gato from './Gato';\r\n// import Cachorro from './Cachorro';\r\n\r\n// var bingo = new Cachorro();\r\n// var felix = new Gato();\r\n\r\n// bingo.falar();\r\n// felix.falar();\r\n\r\n\r\n\r\n/* ANOTAÇÃO ANTERIOR */\r\n\r\n/* Primeiro, eu importo aquele objeto Mamiferos com 'import' para poder acessar\r\nsuas propriedades */\r\n// import Mamiferos from './Mamiferos';\r\n\r\n/* Depois, eu instancio o objeto para torná-lo real */\r\n// var cachorro = new Mamiferos();\r\n\r\n/* Para acessar as propriedades do objeto, eu uso o \".\" e posso modificar/\r\nreescrever o valor que ele recebe */\r\n// cachorro.voz = \"latido\";\r\n\r\n// var gato = new Mamiferos();\r\n// gato.voz = \"miado\";\r\n\r\n// console.log(cachorro.voz);\r\n// console.log(gato.corDoOlho);\r\n// console.log(gato.voz);\r\n\r\n\r\n/*\r\nA idéia em si da definição de um objeto é chamada axioma, na matemática.\r\nA gente sabe o que é mas não sabemos definir.\r\n\r\nO que é uma classe e o que é um objeto?\r\n\r\nOBJETO\r\n\r\nUm objeto é qualquer coisa que possua características.\r\nEle sempre terá características ou propriedades, mas nem sempre ele terá ações.\r\nPor exemplo, um copo pode ser um simples objeto inanimado.\r\n\r\nCLASSE\r\n\r\nUma classe é um objeto que possui características, como:\r\nquantidade de patas, membros, cor de olho, etc... e possui ações como:\r\nandar, falar, etc...\r\n\r\nAs ações chamamos de métodos. Vamos a um exemplo:\r\n\r\nObjeto: carro\r\nPropriedade/ característica: velocidade (a velocidade que consegue atingir)\r\nMétodos/ ações: aceleração, trocar marcha\r\n\r\nObs.: Toda classe deve se iniciar com letra maiúscula\r\n\r\nRecapitulando,...\r\n\r\nToda característica do meu objeto eu chamo de propriedades.\r\nToda ação do meu objeto eu chamo de métodos.\r\nUm objeto possui somente propriedades.\r\nUma classe possui as propriedades do objeto + seus métodos.\r\n*/\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/Main.js","/*\nAgora, estou criando outro botão, cujo objeto nomeio de SuperBotao, para herdar\nas mesmas funcionalidades do objeto Botao e ter funcionalidades acrescentadas,\ncomo criar rollover no botão mudando a cor de vermelho para verde\n*/\n\n/*\nPrimeiramente, preciso importar o objeto Botao usando import\n*/\nimport Botao from './Botao';\n\n/*\nSegundo, com extends eu realizo a herança de um objeto para outro, como\nliteralmente mostra que a classe/objeto SuperBotao extende/herda de Botao\n*/\nclass SuperBotao extends Botao {\n    constructor() {\n        /*\n        Declarando super() representa que posso referenciar os mesmos objetos da\n        superclasse Botao (this.view) para dentro da minha subclasse SuperBotao,\n        onde eu posso, à partir disso, acrescentar novas características como o\n        cursor e o marginTop\n        */\n        super();\n        this.view.style.cursor = 'pointer';\n        this.view.style.marginTop = '20px';\n    }\n\n    /*\n    Agora, para fazer rollover no meu botão, preciso criar uma função para ser\n    possível chamá-la através da Main e, assim, executar essa tarefa;\n    */\n    addEvents() {\n        /*\n        este EventListener está olhando QUANDO o usuário passa o mouse em cima\n        do botão\n        */\n        this.view.addEventListener('mouseover', () => {\n            this.view.style.background = 'green';\n        });\n        /*\n        já este EventListener está olhando QUANDO o usuário passa o mouse para\n        fora do botão, voltando para a cor original\n        */\n        this.view.addEventListener('mouseout', () => {\n            this.view.style.background = 'red';\n        });\n    }\n\n}\n\n/*\nE com export default, eu exporto o objeto SuperBotao para usá-lo na Main, por exemplo\n*/\nexport default SuperBotao;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/SuperBotao.js"],"sourceRoot":""}