{"version":3,"sources":["webpack:///webpack/bootstrap 8c826cad7b05c278bf1e","webpack:///./src/js/Mamiferos.js","webpack:///./src/js/Main.js","webpack:///./src/js/Gato.js","webpack:///./src/js/Cachorro.js"],"names":["Mamiferos","voz","corDoOlho","console","log","bingo","Cachorro","felix","Gato","falar"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;AC7DA;;IAEMA,S;;;;OAELC,G,GAAM,E;OACNC,S,GAAY,E;;;;;0BAEJ;AACP;;AAEAC,WAAQC,GAAR,CAAY,KAAKH,GAAjB;AACA;;;;;;kBAGaD,S;;AAGf;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;;;ACtBA;;;;AACA;;;;;;AARA;;;;;;;AAUA,IAAIK,QAAQ,IAAIC,kBAAJ,EAAZ;AACA,IAAIC,QAAQ,IAAIC,cAAJ,EAAZ;;AAEAH,MAAMI,KAAN;AACAF,MAAME,KAAN;;AAIA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCA;;;;;;;;;;;;IAEMD,I;;;AACF,oBAAc;AAAA;;AAAA;;AAEV,cAAKP,GAAL,GAAW,OAAX;AAFU;AAGb;;;EAJcD,mB;;kBAOJQ,I;;;;;;;;;;;;;ACDf;;;;;;;;;;+eARA;;;;;;;;IAUMF,Q;;;AACF;AACA;;;;;AAKA,wBAAc;AAAA;;AAAA;;AAEV,cAAKL,GAAL,GAAW,QAAX;AACA;;;;;;;AAHU;AAUb;;;EAjBkBD,mB;;kBAqBRM,Q","file":"script.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8c826cad7b05c278bf1e","/* Vamos criar um método falar() dentro da classe Mamiferos */\n\nclass Mamiferos {\n\n\tvoz = \"\";\n\tcorDoOlho = \"\";\n\n\tfalar() {\n\t\t/* this representa a classe Mamiferos;\n\t\tvoz é a variável que estou pegando dentro dessa classe */\n\t\tconsole.log(this.voz);\n\t}\n}\n\nexport default Mamiferos;\n\n\n/* ANOTAÇÃO ANTERIOR */\n\n/* Este é um exemplo de objeto; é preciso escrever algumas propriedades que vão\ndefinir o objeto */\n\n// class Mamiferos {\n// \tvoz = \"\";\n// \tcorDoOlho = \"preto\";\n// }\n\n// export default Mamiferos;\n\n/*\nAgora, este objeto está definido mas ainda não existe.\nPara existir, quando criamos um objeto real a gente instancia,\npor isso, vamos importar esse objeto lá na classe Main.\n*/\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/Mamiferos.js","/*\r\nHERANÇA\r\n\r\nServe para quando queremos evoluir um objeto, sem se desfazer do objeto anterior.\r\nHerda as características do objeto anterior e acrescenta/ extende novas funcionalidades.\r\n*/\r\n\r\nimport Gato from './Gato';\r\nimport Cachorro from './Cachorro';\r\n\r\nvar bingo = new Cachorro();\r\nvar felix = new Gato();\r\n\r\nbingo.falar();\r\nfelix.falar();\r\n\r\n\r\n\r\n/* ANOTAÇÃO ANTERIOR */\r\n\r\n/* Primeiro, eu importo aquele objeto Mamiferos com 'import' para poder acessar\r\nsuas propriedades */\r\n// import Mamiferos from './Mamiferos';\r\n\r\n/* Depois, eu instancio o objeto para torná-lo real */\r\n// var cachorro = new Mamiferos();\r\n\r\n/* Para acessar as propriedades do objeto, eu uso o \".\" e posso modificar/\r\nreescrever o valor que ele recebe */\r\n// cachorro.voz = \"latido\";\r\n\r\n// var gato = new Mamiferos();\r\n// gato.voz = \"miado\";\r\n\r\n// console.log(cachorro.voz);\r\n// console.log(gato.corDoOlho);\r\n// console.log(gato.voz);\r\n\r\n\r\n/*\r\nA idéia em si da definição de um objeto é chamada axioma, na matemática.\r\nA gente sabe o que é mas não sabemos definir.\r\n\r\nO que é uma classe e o que é um objeto?\r\n\r\nOBJETO\r\n\r\nUm objeto é qualquer coisa que possua características.\r\nEle sempre terá características ou propriedades, mas nem sempre ele terá ações.\r\nPor exemplo, um copo pode ser um simples objeto inanimado.\r\n\r\nCLASSE\r\n\r\nUma classe é um objeto que possui características, como:\r\nquantidade de patas, membros, cor de olho, etc... e possui ações como:\r\nandar, falar, etc...\r\n\r\nAs ações chamamos de métodos. Vamos a um exemplo:\r\n\r\nObjeto: carro\r\nPropriedade/ característica: velocidade (a velocidade que consegue atingir)\r\nMétodos/ ações: aceleração, trocar marcha\r\n\r\nObs.: Toda classe deve se iniciar com letra maiúscula\r\n\r\nRecapitulando,...\r\n\r\nToda característica do meu objeto eu chamo de propriedades.\r\nToda ação do meu objeto eu chamo de métodos.\r\nUm objeto possui somente propriedades.\r\nUma classe possui as propriedades do objeto + seus métodos.\r\n*/\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/Main.js","import Mamiferos from './Mamiferos';\n\nclass Gato extends Mamiferos {\n    constructor() {\n        super();\n        this.voz = \"miado\";\n    }\n}\n\nexport default Gato;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/Gato.js","/*\nA classe Cachorro.js é uma nova classe criada, que herdará as mesmas características\nda classe Mamiferos (com extends) e terá novas características próprias desse\nanimal cachorro; para tanto, é necessário importar a classe Mamiferos (com import);\nno final, exportamos a classe Cachorro (com export) para conseguirmos utilizá-la\nem outros lugares\n*/\n\nimport Mamiferos from './Mamiferos';\n\nclass Cachorro extends Mamiferos {\n    /* dentro desse bloco representa coisas que só a classe Cachorro possui */\n    /*\n    Constructor representa uma função especial dentro de uma classe; tudo o que\n    estiver dentro do método constructor() significa que vai ser executado no\n    momento em que for instanciado o objeto Cachorro\n    */\n    constructor() {\n        super();\n        this.voz = \"latido\";\n        /*\n        Sempre q se extende uma classe, ela é chamada de superclasse. No caso,\n        Mamiferos é a superclasse e Cachorro é a subclasse; esse this faz\n        referência às características existentes dentro da classe Mamiferos,\n        logo, é obrigatório declarar super() acima de tudo, ao pegar características\n        do objeto herdado\n        */\n    }\n\n}\n\nexport default Cachorro;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/Cachorro.js"],"sourceRoot":""}